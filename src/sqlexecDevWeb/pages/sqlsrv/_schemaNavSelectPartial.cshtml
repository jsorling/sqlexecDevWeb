@using Sorling.SqlExecMeta.objects;
@using Sorling.SqlExecMeta;
@using Sorling.sqlexecDevWeb.extensions;
@using Sorling.sqlexecDevWeb.models.pagemodels
@using Sorling.sqlexecDevWeb;
@model DBSchemaPageModel
@{
    string? ogroup = ViewContext.RouteData.Values["page"]?.ToString()?.Split("/").Last() ?? "objects";
    SqlGroupFlags pageFlags = Model.PageGroupFlags ?? SqlGroupFlags.TopLevel;
}

<div class="btn-group flex-wrap">
    @if (pageFlags.In(SqlGroupFlags.Tables, SqlGroupFlags.Views, SqlGroupFlags.Triggers))
    {
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Tables">Tables</a>
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Views">Views</a>
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Triggers">Triggers</a>
    }
    else
    {
        <a class="btn btn-primary flex-grow-0" sed-page="SqlGroupFlags.Tables">
            <span class="bs-icon-sm bs-icon-rounded bs-icon-primary d-flex justify-content-center align-items-center me-2 bs-icon">
                <img src="/img/table.png" />
            </span>
        </a>
    }

    @if (pageFlags.In(SqlGroupFlags.StoredProcedures, SqlGroupFlags.Functions))
    {

        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.StoredProcedures">Stored procedures</a>
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Functions">Functions</a>
    }
    else
    {
        <a class="btn btn-primary flex-grow-0" sed-page="SqlGroupFlags.StoredProcedures">
            <span class="bs-icon-sm bs-icon-rounded bs-icon-primary d-flex justify-content-center align-items-center me-2 bs-icon">
                <img src="/img/sql.png" />
            </span>
        </a>
    }

    @if (pageFlags.In(SqlGroupFlags.TableTypes, SqlGroupFlags.Types, SqlGroupFlags.DefaultConstraints, SqlGroupFlags.CheckConstraints))
    {
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Types">Types</a>
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.DefaultConstraints">Defaults</a>
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.CheckConstraints">Checks</a>
    }
    else
    {
        <a class="btn btn-primary flex-grow-0" sed-page="SqlGroupFlags.Types">
            <span class="bs-icon-sm bs-icon-rounded bs-icon-primary d-flex justify-content-center align-items-center me-2 bs-icon">
                <img src="/img/typesnconstraints.png" />
            </span>
        </a>
    }

    @if (pageFlags.In(SqlGroupFlags.Principals))
    {
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.Principals">Principals</a>
    }
    else
    {
        <a class="btn btn-primary flex-grow-0" sed-page="SqlGroupFlags.Principals">
            <span class="bs-icon-sm bs-icon-rounded bs-icon-primary d-flex justify-content-center align-items-center me-2 bs-icon">
                <img src="/img/security.png" />
            </span>
        </a>
    }

    @if (pageFlags.In(SqlGroupFlags.Objects, SqlGroupFlags.TopLevel))
    {
        <a class="btn btn-primary flex-grow-0" sed-class-page-active="active" sed-page="SqlGroupFlags.TopLevel">Top-level objects</a>
    }
    else
    {
        <a class="btn btn-primary flex-grow-0" sed-page="SqlGroupFlags.TopLevel">
            <span class="bs-icon-sm bs-icon-rounded bs-icon-primary d-flex justify-content-center align-items-center me-2 bs-icon">
                <img src="/img/toplevel.png" />
            </span>
        </a>
    }


    <a class="btn btn-primary dropdown-toggle flex-grow-0" aria-expanded="false" data-bs-toggle="dropdown" href="#">
        @(string.IsNullOrWhiteSpace(Model.SchemaFolder) ? "All schemas" : Model.SchemaFolder)
    </a>
    <div class="dropdown-menu" data-bs-popper="none">
        @{
            if (Model.DBSchemas is not null)
            {
                var list = Model.DBSchemas.ToList();
                int i = 0;
                var hascurrent = false;
                for (i = 0; i < list.Count() && i < GuiConsts.SCHEMAMENUNOITEMS; i++)
                {
                    var sch = list[i];
                    if (sch == Model.SchemaFolder)
                    {
                        <a class="dropdown-item active" sed-schema="" sed-project="debug">@sch</a>
                        hascurrent = true;
                    }
                    else
                    {
                        <a class="dropdown-item" sed-schema="@sch">@sch</a>
                    }
                }                
                <div class="dropdown-divider"></div>
                if (!hascurrent && !string.IsNullOrWhiteSpace(Model.SchemaFolder))
                {
                    <a class="dropdown-item active" sed-schema="" sed-project="debug">@Model.SchemaFolder</a>
                }
                if (list.Count() >= GuiConsts.SCHEMAMENUNOITEMS)
                {
                    <a class="dropdown-item" sed-page="SqlGroupFlags.Schemas">More...</a>
                }
                <a class="dropdown-item" sed-schema="">No filter</a>
            }
        }
    </div>
</div>
